--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -274,7 +274,11 @@ static int ip_finish_output(struct sock
 	if (skb_is_gso(skb))
 		return ip_finish_output_gso(sk, skb);
 
-	if (skb->len > ip_skb_dst_mtu(skb))
+	/*
+	 * Do not fragment the packets going to 4in6 tunnel:
+	 * RFC2473 sec 7.2: fragmentation should happen in tunnel
+	 */
+	if (skb_dst(skb)->dev->type != ARPHRD_TUNNEL6 && skb->len > ip_skb_dst_mtu(skb))
 		return ip_fragment(sk, skb, ip_finish_output2);
 
 	return ip_finish_output2(sk, skb);
--- a/net/ipv6/ip6_tunnel.c
+++ b/net/ipv6/ip6_tunnel.c
@@ -998,6 +998,7 @@ static int ip6_tnl_xmit2(struct sk_buff
 	unsigned int max_headroom = sizeof(struct ipv6hdr);
 	u8 proto;
 	int err = -1;
+	int needFrag = 0;
 
 	/* NBMA tunnel */
 	if (ipv6_addr_any(&t->parms.raddr)) {
@@ -1059,9 +1060,20 @@ static int ip6_tnl_xmit2(struct sk_buff
 	if (skb_dst(skb))
 		skb_dst(skb)->ops->update_pmtu(skb_dst(skb), NULL, skb, mtu);
 	if (skb->len > mtu) {
-		*pmtu = mtu;
-		err = -EMSGSIZE;
-		goto tx_err_dst_release;
+		/*
+		 * Fragment IPv6 packet for tunneled IPv4 packets if DF is not set
+		 * RFC2473 sec 7.2: fragmentation should happen in tunnel
+		 */
+		if (fl6->flowi6_proto == IPPROTO_IPIP && 
+		    (!(ip_hdr(skb)->frag_off & htons(IP_DF)))) {
+			needFrag = 1;
+		}
+
+		if (!needFrag) {
+			*pmtu = mtu;
+			err = -EMSGSIZE;
+			goto tx_err_dst_release;
+		}
 	}
 
 	skb_scrub_packet(skb, !net_eq(t->net, dev_net(dev)));
@@ -1112,6 +1124,7 @@ static int ip6_tnl_xmit2(struct sk_buff
 	ipv6h->nexthdr = proto;
 	ipv6h->saddr = fl6->saddr;
 	ipv6h->daddr = fl6->daddr;
+	skb->ignore_df = needFrag ? 1 : 0;
 	ip6tunnel_xmit(NULL, skb, dev);
 
 	if (ndst)
--- a/include/net/ip6_tunnel.h
+++ b/include/net/ip6_tunnel.h
@@ -5,6 +5,7 @@
 #include <linux/netdevice.h>
 #include <linux/if_tunnel.h>
 #include <linux/ip6_tunnel.h>
+#include <net/ip6_route.h>
 
 #define IP6TUNNEL_ERR_TIMEO (30*HZ)
 
@@ -80,7 +81,10 @@ static inline void ip6tunnel_xmit(struct
 	int pkt_len, err;
 
 	pkt_len = skb->len;
-	err = ip6_local_out_sk(sk, skb);
+	if (skb_is_gso(skb) || !skb->ignore_df)
+		err = ip6_local_out_sk(sk, skb);
+	else
+		err = ip6_fragment(sk, skb, ip6_local_out_sk);
 
 	if (net_xmit_eval(err) == 0) {
 		struct pcpu_sw_netstats *tstats = get_cpu_ptr(dev->tstats);
