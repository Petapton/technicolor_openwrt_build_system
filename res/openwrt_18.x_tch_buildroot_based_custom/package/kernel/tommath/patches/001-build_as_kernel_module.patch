diff -Naurdw libtommath-0.42.0/Makefile tommath/Makefile
--- libtommath-0.42.0/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ tommath/Makefile	2013-02-15 14:42:54.577067589 +0100
@@ -0,0 +1,140 @@
+tommath_SRCS = bn_mp_reduce_2k_setup.c \
+bn_mp_sub_d.c \
+bn_error.c \
+bn_mp_lshd.c \
+bn_fast_s_mp_sqr.c \
+bn_mp_clamp.c \
+bn_mp_or.c \
+bn_reverse.c \
+bn_mp_radix_smap.c \
+bn_mp_count_bits.c \
+bn_mp_exch.c \
+bn_mp_init_set.c \
+bn_mp_rand.c \
+bn_mp_to_unsigned_bin_n.c \
+bn_mp_exptmod_fast.c \
+bn_mp_signed_bin_size.c \
+bn_mp_n_root.c \
+bn_prime_tab.c \
+bn_mp_dr_setup.c \
+bn_mp_init.c \
+bn_mp_and.c \
+bncore.c \
+bn_s_mp_mul_high_digs.c \
+bn_mp_add.c \
+bn_mp_div_2d.c \
+bn_fast_mp_montgomery_reduce.c \
+bn_mp_copy.c \
+bn_mp_prime_is_divisible.c \
+bn_mp_mulmod.c \
+bn_mp_mul.c \
+bn_s_mp_mul_digs.c \
+bn_mp_get_int.c \
+bn_mp_sub.c \
+bn_mp_invmod.c \
+bn_mp_unsigned_bin_size.c \
+bn_mp_invmod_slow.c \
+bn_mp_montgomery_calc_normalization.c \
+bn_mp_cmp_d.c \
+bn_mp_cnt_lsb.c \
+bn_mp_jacobi.c \
+bn_s_mp_exptmod.c \
+bn_mp_submod.c \
+bn_mp_reduce_2k_setup_l.c \
+bn_mp_mod_2d.c \
+bn_mp_neg.c \
+bn_mp_dr_is_modulus.c \
+bn_mp_div_d.c \
+bn_mp_abs.c \
+bn_fast_s_mp_mul_digs.c \
+bn_mp_set_int.c \
+bn_mp_to_signed_bin_n.c \
+bn_mp_read_signed_bin.c \
+bn_mp_mul_2.c \
+bn_mp_div_2.c \
+bn_mp_div_3.c \
+bn_mp_reduce_2k_l.c \
+bn_mp_reduce_setup.c \
+bn_mp_radix_size.c \
+bn_mp_sqrt.c \
+bn_mp_init_set_int.c \
+bn_mp_zero.c \
+bn_mp_mod.c \
+bn_mp_to_unsigned_bin.c \
+bn_mp_is_square.c \
+bn_mp_cmp.c \
+bn_mp_set.c \
+bn_mp_2expt.c \
+bn_mp_reduce.c \
+bn_s_mp_sqr.c \
+bn_mp_toom_mul.c \
+bn_mp_addmod.c \
+bn_mp_toradix_n.c \
+bn_mp_gcd.c \
+bn_mp_toradix.c \
+bn_mp_init_copy.c \
+bn_mp_reduce_2k.c \
+bn_mp_add_d.c \
+bn_fast_s_mp_mul_high_digs.c \
+bn_mp_xor.c \
+bn_mp_shrink.c \
+bn_mp_read_radix.c \
+bn_mp_sqr.c \
+bn_mp_toom_sqr.c \
+bn_mp_clear_multi.c \
+bn_mp_prime_random_ex.c \
+bn_mp_read_unsigned_bin.c \
+bn_mp_mul_2d.c \
+bn_mp_dr_reduce.c \
+bn_s_mp_sub.c \
+bn_mp_grow.c \
+bn_mp_mul_d.c \
+bn_mp_mod_d.c \
+bn_mp_sqrmod.c \
+bn_mp_karatsuba_sqr.c \
+bn_fast_mp_invmod.c \
+bn_mp_init_multi.c \
+bn_mp_reduce_is_2k.c \
+bn_mp_lcm.c \
+bn_mp_div.c \
+bn_mp_rshd.c \
+bn_mp_cmp_mag.c \
+bn_mp_karatsuba_mul.c \
+bn_mp_expt_d.c \
+bn_mp_prime_is_prime.c \
+bn_mp_prime_miller_rabin.c \
+bn_mp_init_size.c \
+bn_mp_exteuclid.c \
+bn_mp_reduce_is_2k_l.c \
+bn_mp_clear.c \
+bn_mp_prime_fermat.c \
+bn_mp_prime_next_prime.c \
+bn_mp_to_signed_bin.c \
+bn_s_mp_add.c \
+bn_mp_exptmod.c \
+bn_mp_montgomery_reduce.c \
+bn_mp_montgomery_setup.c \
+bn_mp_prime_rabin_miller_trials.c \
+tommath_export.c
+
+
+EXTRA_CFLAGS += -I$(SUBDIRS)/ -I$(KERNEL_DIR)/include/linux -DLTC_SOURCE -Wall
+
+TOMMATH_OBJECTS = $(tommath_SRCS:.c=.o) 
+
+tommath-y = $(TOMMATH_OBJECTS)
+
+obj-$(CONFIG_CRYPTO_TOMMATH) += tommath.o
+
+build:	
+	CROSS_COMPILE=$(CROSS_COMPILE) $(MAKE) ARCH=$(ARCH) V=1 -C $(KERNEL_DIR) SUBDIRS=`pwd` modules
+
+clean:
+	$(MAKE) -C $(KERNEL_DIR) SUBDIRS=`pwd` clean
+	$(MAKE) -C tests clean
+	$(MAKE) -C examples clean
+	$(MAKE) -C userspace clean
+	rm -f $(hostprogs)
+
+check:
+	KERNEL_DIR=$(KERNEL_DIR) $(MAKE) -C tests check
diff -Naurdw libtommath-0.42.0/bn_mp_div.c tommath/bn_mp_div.c
--- libtommath-0.42.0/bn_mp_div.c	2010-07-23 16:27:19.000000000 +0200
+++ tommath/bn_mp_div.c	2013-02-15 14:42:53.816006130 +0100
@@ -195,7 +195,7 @@
       mp_word tmp;
       tmp = ((mp_word) x.dp[i]) << ((mp_word) DIGIT_BIT);
       tmp |= ((mp_word) x.dp[i - 1]);
-      tmp /= ((mp_word) y.dp[t]);
+			tmp = word_div_int(tmp, (int)y.dp[t]);
       if (tmp > (mp_word) MP_MASK)
         tmp = MP_MASK;
       q.dp[i - t - 1] = (mp_digit) (tmp & (mp_word) (MP_MASK));
diff -Naurdw libtommath-0.42.0/bn_mp_div_d.c tommath/bn_mp_div_d.c
--- libtommath-0.42.0/bn_mp_div_d.c	2010-07-23 16:27:19.000000000 +0200
+++ tommath/bn_mp_div_d.c	2013-02-15 14:42:53.845191208 +0100
@@ -87,7 +87,7 @@
      w = (w << ((mp_word)DIGIT_BIT)) | ((mp_word)a->dp[ix]);
      
      if (w >= b) {
-        t = (mp_digit)(w / b);
+			t = (mp_digit) (word_div_int(w, b));
         w -= ((mp_word)t) * ((mp_word)b);
       } else {
         t = 0;
diff -Naurdw libtommath-0.42.0/makefile tommath/makefile
--- libtommath-0.42.0/makefile	2010-07-23 16:27:19.000000000 +0200
+++ tommath/makefile	1970-01-01 01:00:00.000000000 +0100
@@ -1,186 +0,0 @@
-#Makefile for GCC
-#
-#Tom St Denis
-
-#version of library 
-VERSION=0.42.0
-
-CFLAGS  +=  -I./ -Wall -W -Wshadow -Wsign-compare
-
-ifndef MAKE
-   MAKE=make
-endif
-
-ifndef IGNORE_SPEED
-
-#for speed 
-CFLAGS += -O3 -funroll-loops
-
-#for size 
-#CFLAGS += -Os
-
-#x86 optimizations [should be valid for any GCC install though]
-CFLAGS  += -fomit-frame-pointer
-
-#debug
-#CFLAGS += -g3
-
-endif
-
-#install as this user
-ifndef INSTALL_GROUP
-   GROUP=wheel
-else
-   GROUP=$(INSTALL_GROUP)
-endif
-
-ifndef INSTALL_USER
-   USER=root
-else
-   USER=$(INSTALL_USER)
-endif
-
-#default files to install
-ifndef LIBNAME
-   LIBNAME=libtommath.a
-endif
-
-default: ${LIBNAME}
-
-HEADERS=tommath.h tommath_class.h tommath_superclass.h
-
-#LIBPATH-The directory for libtommath to be installed to.
-#INCPATH-The directory to install the header files for libtommath.
-#DATAPATH-The directory to install the pdf docs.
-DESTDIR=
-LIBPATH=/usr/lib
-INCPATH=/usr/include
-DATAPATH=/usr/share/doc/libtommath/pdf
-
-OBJECTS=bncore.o bn_mp_init.o bn_mp_clear.o bn_mp_exch.o bn_mp_grow.o bn_mp_shrink.o \
-bn_mp_clamp.o bn_mp_zero.o  bn_mp_set.o bn_mp_set_int.o bn_mp_init_size.o bn_mp_copy.o \
-bn_mp_init_copy.o bn_mp_abs.o bn_mp_neg.o bn_mp_cmp_mag.o bn_mp_cmp.o bn_mp_cmp_d.o \
-bn_mp_rshd.o bn_mp_lshd.o bn_mp_mod_2d.o bn_mp_div_2d.o bn_mp_mul_2d.o bn_mp_div_2.o \
-bn_mp_mul_2.o bn_s_mp_add.o bn_s_mp_sub.o bn_fast_s_mp_mul_digs.o bn_s_mp_mul_digs.o \
-bn_fast_s_mp_mul_high_digs.o bn_s_mp_mul_high_digs.o bn_fast_s_mp_sqr.o bn_s_mp_sqr.o \
-bn_mp_add.o bn_mp_sub.o bn_mp_karatsuba_mul.o bn_mp_mul.o bn_mp_karatsuba_sqr.o \
-bn_mp_sqr.o bn_mp_div.o bn_mp_mod.o bn_mp_add_d.o bn_mp_sub_d.o bn_mp_mul_d.o \
-bn_mp_div_d.o bn_mp_mod_d.o bn_mp_expt_d.o bn_mp_addmod.o bn_mp_submod.o \
-bn_mp_mulmod.o bn_mp_sqrmod.o bn_mp_gcd.o bn_mp_lcm.o bn_fast_mp_invmod.o bn_mp_invmod.o \
-bn_mp_reduce.o bn_mp_montgomery_setup.o bn_fast_mp_montgomery_reduce.o bn_mp_montgomery_reduce.o \
-bn_mp_exptmod_fast.o bn_mp_exptmod.o bn_mp_2expt.o bn_mp_n_root.o bn_mp_jacobi.o bn_reverse.o \
-bn_mp_count_bits.o bn_mp_read_unsigned_bin.o bn_mp_read_signed_bin.o bn_mp_to_unsigned_bin.o \
-bn_mp_to_signed_bin.o bn_mp_unsigned_bin_size.o bn_mp_signed_bin_size.o  \
-bn_mp_xor.o bn_mp_and.o bn_mp_or.o bn_mp_rand.o bn_mp_montgomery_calc_normalization.o \
-bn_mp_prime_is_divisible.o bn_prime_tab.o bn_mp_prime_fermat.o bn_mp_prime_miller_rabin.o \
-bn_mp_prime_is_prime.o bn_mp_prime_next_prime.o bn_mp_dr_reduce.o \
-bn_mp_dr_is_modulus.o bn_mp_dr_setup.o bn_mp_reduce_setup.o \
-bn_mp_toom_mul.o bn_mp_toom_sqr.o bn_mp_div_3.o bn_s_mp_exptmod.o \
-bn_mp_reduce_2k.o bn_mp_reduce_is_2k.o bn_mp_reduce_2k_setup.o \
-bn_mp_reduce_2k_l.o bn_mp_reduce_is_2k_l.o bn_mp_reduce_2k_setup_l.o \
-bn_mp_radix_smap.o bn_mp_read_radix.o bn_mp_toradix.o bn_mp_radix_size.o \
-bn_mp_fread.o bn_mp_fwrite.o bn_mp_cnt_lsb.o bn_error.o \
-bn_mp_init_multi.o bn_mp_clear_multi.o bn_mp_exteuclid.o bn_mp_toradix_n.o \
-bn_mp_prime_random_ex.o bn_mp_get_int.o bn_mp_sqrt.o bn_mp_is_square.o bn_mp_init_set.o \
-bn_mp_init_set_int.o bn_mp_invmod_slow.o bn_mp_prime_rabin_miller_trials.o \
-bn_mp_to_signed_bin_n.o bn_mp_to_unsigned_bin_n.o
-
-$(LIBNAME):  $(OBJECTS)
-	$(AR) $(ARFLAGS) $@ $(OBJECTS)
-	ranlib $@
-
-#make a profiled library (takes a while!!!)
-#
-# This will build the library with profile generation
-# then run the test demo and rebuild the library.
-# 
-# So far I've seen improvements in the MP math
-profiled:
-	make CFLAGS="$(CFLAGS) -fprofile-arcs -DTESTING" timing
-	./ltmtest
-	rm -f *.a *.o ltmtest
-	make CFLAGS="$(CFLAGS) -fbranch-probabilities"
-
-#make a single object profiled library 
-profiled_single:
-	perl gen.pl
-	$(CC) $(CFLAGS) -fprofile-arcs -DTESTING -c mpi.c -o mpi.o
-	$(CC) $(CFLAGS) -DTESTING -DTIMER demo/timing.c mpi.o -o ltmtest
-	./ltmtest
-	rm -f *.o ltmtest
-	$(CC) $(CFLAGS) -fbranch-probabilities -DTESTING -c mpi.c -o mpi.o
-	$(AR) $(ARFLAGS) $(LIBNAME) mpi.o
-	ranlib $(LIBNAME)	
-
-install: $(LIBNAME)
-	install -d -g $(GROUP) -o $(USER) $(DESTDIR)$(LIBPATH)
-	install -d -g $(GROUP) -o $(USER) $(DESTDIR)$(INCPATH)
-	install -g $(GROUP) -o $(USER) $(LIBNAME) $(DESTDIR)$(LIBPATH)
-	install -g $(GROUP) -o $(USER) $(HEADERS) $(DESTDIR)$(INCPATH)
-
-test: $(LIBNAME) demo/demo.o
-	$(CC) $(CFLAGS) demo/demo.o $(LIBNAME) -o test
-	
-mtest: test	
-	cd mtest ; $(CC) $(CFLAGS) mtest.c -o mtest
-        
-timing: $(LIBNAME)
-	$(CC) $(CFLAGS) -DTIMER demo/timing.c $(LIBNAME) -o ltmtest
-
-# makes the LTM book DVI file, requires tetex, perl and makeindex [part of tetex I think]
-docdvi: tommath.src
-	cd pics ; MAKE=${MAKE} ${MAKE} 
-	echo "hello" > tommath.ind
-	perl booker.pl
-	latex tommath > /dev/null
-	latex tommath > /dev/null
-	makeindex tommath
-	latex tommath > /dev/null
-
-# poster, makes the single page PDF poster
-poster: poster.tex
-	pdflatex poster
-	rm -f poster.aux poster.log 
-
-# makes the LTM book PDF file, requires tetex, cleans up the LaTeX temp files
-docs:   docdvi
-	dvipdf tommath
-	rm -f tommath.log tommath.aux tommath.dvi tommath.idx tommath.toc tommath.lof tommath.ind tommath.ilg
-	cd pics ; MAKE=${MAKE} ${MAKE} clean
-	
-#LTM user manual
-mandvi: bn.tex
-	echo "hello" > bn.ind
-	latex bn > /dev/null
-	latex bn > /dev/null
-	makeindex bn
-	latex bn > /dev/null
-
-#LTM user manual [pdf]
-manual:	mandvi
-	pdflatex bn >/dev/null
-	rm -f bn.aux bn.dvi bn.log bn.idx bn.lof bn.out bn.toc
-
-pretty: 
-	perl pretty.build
-
-clean:
-	rm -f *.bat *.pdf *.o *.a *.obj *.lib *.exe *.dll etclib/*.o demo/demo.o test ltmtest mpitest mtest/mtest mtest/mtest.exe \
-        *.idx *.toc *.log *.aux *.dvi *.lof *.ind *.ilg *.ps *.log *.s mpi.c *.da *.dyn *.dpi tommath.tex `find . -type f | grep [~] | xargs` *.lo *.la
-	rm -rf .libs
-	cd etc ; MAKE=${MAKE} ${MAKE} clean
-	cd pics ; MAKE=${MAKE} ${MAKE} clean
-
-#zipup the project (take that!)
-no_oops: clean
-	cd .. ; cvs commit 
-	echo Scanning for scratch/dirty files
-	find . -type f | grep -v CVS | xargs -n 1 bash mess.sh
-
-zipup: clean manual poster docs
-	perl gen.pl ; mv mpi.c pre_gen/ ; \
-	cd .. ; rm -rf ltm* libtommath-$(VERSION) ; mkdir libtommath-$(VERSION) ; \
-	cp -R ./libtommath/* ./libtommath-$(VERSION)/ ; \
-	tar -c libtommath-$(VERSION)/* | bzip2 -9vvc > ltm-$(VERSION).tar.bz2 ; \
-	zip -9 -r ltm-$(VERSION).zip libtommath-$(VERSION)/* ; \
-	mv -f ltm* ~ ; rm -rf libtommath-$(VERSION)
diff -Naurdw libtommath-0.42.0/tommath.h tommath/tommath.h
--- libtommath-0.42.0/tommath.h	2010-07-23 16:27:20.000000000 +0200
+++ tommath/tommath.h	2013-02-15 14:42:53.871136412 +0100
@@ -15,11 +15,33 @@
 #ifndef BN_H_
 #define BN_H_
 
+#ifdef __KERNEL__
+#include <linux/kernel.h>
+#include <linux/mm.h>
+#include <linux/slab.h>
+#include <linux/random.h>
+#include <linux/ctype.h>
+#include <linux/math64.h>
+#include <linux/limits.h>
+
+#define CHAR_BIT sizeof(uint8_t)*8
+
+inline static int rand(void)
+{
+	int res;
+
+	get_random_bytes(&res, sizeof(int));
+
+	return res;
+}
+#else
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
 #include <ctype.h>
 #include <limits.h>
+#endif
+
 
 #include <tommath_class.h>
 
@@ -104,7 +126,22 @@
 #endif   
 #endif
 
+#if defined(__KERNEL__)
+#define word_div_int(x,y) div_u64((x),(y))
+#else
+#define word_div_int(x,y) ((x)/(y))
+#endif
+
+
 /* define heap macros */
+#if defined(__KERNEL__)
+#ifndef XMALLOC
+	#define XMALLOC(x) kmalloc(x, GFP_KERNEL)
+	#define XFREE kfree
+	#define XREALLOC(x,y) krealloc(x,y, GFP_KERNEL)
+	#define XCALLOC(x,y) kzalloc(x*y, GPF_KERNEL)
+	#endif
+#else
 #ifndef CRYPT
    /* default to libc stuff */
    #ifndef XMALLOC 
@@ -120,6 +157,7 @@
       extern void XFREE(void *p);
    #endif
 #endif
+#endif
 
 
 /* otherwise the bits per digit is calculated automatically from the size of a mp_digit */
@@ -161,6 +199,9 @@
            TOOM_SQR_CUTOFF;
 
 /* define this to use lower memory usage routines (exptmods mostly) */
+#if defined(__KERNEL__)
+#define MP_LOW_MEM
+#endif
 /* #define MP_LOW_MEM */
 
 /* default precision */
@@ -534,8 +575,10 @@
 int mp_toradix_n(mp_int * a, char *str, int radix, int maxlen);
 int mp_radix_size(mp_int *a, int radix, int *size);
 
+#if 0
 int mp_fread(mp_int *a, int radix, FILE *stream);
 int mp_fwrite(mp_int *a, int radix, FILE *stream);
+#endif
 
 #define mp_read_raw(mp, str, len) mp_read_signed_bin((mp), (str), (len))
 #define mp_raw_size(mp)           mp_signed_bin_size(mp)
diff -Naurdw libtommath-0.42.0/tommath_export.c tommath/tommath_export.c
--- libtommath-0.42.0/tommath_export.c	1970-01-01 01:00:00.000000000 +0100
+++ tommath/tommath_export.c	2013-02-15 14:42:54.604009263 +0100
@@ -0,0 +1,101 @@
+#include <linux/module.h>
+#include "tommath.h"
+
+/* Export all symbols of tommath */
+EXPORT_SYMBOL(mp_error_to_string);
+EXPORT_SYMBOL(mp_init);
+EXPORT_SYMBOL(mp_clear);
+EXPORT_SYMBOL(mp_init_multi);
+EXPORT_SYMBOL(mp_clear_multi);
+EXPORT_SYMBOL(mp_exch);
+EXPORT_SYMBOL(mp_shrink);
+EXPORT_SYMBOL(mp_grow);
+EXPORT_SYMBOL(mp_init_size);
+EXPORT_SYMBOL(mp_zero);
+EXPORT_SYMBOL(mp_set);
+EXPORT_SYMBOL(mp_set_int);
+EXPORT_SYMBOL(mp_get_int);
+EXPORT_SYMBOL(mp_init_set);
+EXPORT_SYMBOL(mp_init_set_int);
+EXPORT_SYMBOL(mp_copy);
+EXPORT_SYMBOL(mp_init_copy);
+EXPORT_SYMBOL(mp_clamp);
+EXPORT_SYMBOL(mp_rshd);
+EXPORT_SYMBOL(mp_lshd);
+EXPORT_SYMBOL(mp_div_2d);
+EXPORT_SYMBOL(mp_div_2);
+EXPORT_SYMBOL(mp_mul_2d);
+EXPORT_SYMBOL(mp_mul_2);
+EXPORT_SYMBOL(mp_mod_2d);
+EXPORT_SYMBOL(mp_2expt);
+EXPORT_SYMBOL(mp_cnt_lsb);
+EXPORT_SYMBOL(mp_rand);
+EXPORT_SYMBOL(mp_xor);
+EXPORT_SYMBOL(mp_or);
+EXPORT_SYMBOL(mp_and);
+EXPORT_SYMBOL(mp_neg);
+EXPORT_SYMBOL(mp_abs);
+EXPORT_SYMBOL(mp_cmp);
+EXPORT_SYMBOL(mp_cmp_mag);
+EXPORT_SYMBOL(mp_add);
+EXPORT_SYMBOL(mp_sub);
+EXPORT_SYMBOL(mp_mul);
+EXPORT_SYMBOL(mp_sqr);
+EXPORT_SYMBOL(mp_div);
+EXPORT_SYMBOL(mp_mod);
+EXPORT_SYMBOL(mp_cmp_d);
+EXPORT_SYMBOL(mp_add_d);
+EXPORT_SYMBOL(mp_sub_d);
+EXPORT_SYMBOL(mp_mul_d);
+EXPORT_SYMBOL(mp_div_d);
+EXPORT_SYMBOL(mp_div_3);
+EXPORT_SYMBOL(mp_expt_d);
+EXPORT_SYMBOL(mp_mod_d);
+EXPORT_SYMBOL(mp_addmod);
+EXPORT_SYMBOL(mp_submod);
+EXPORT_SYMBOL(mp_mulmod);
+EXPORT_SYMBOL(mp_sqrmod);
+EXPORT_SYMBOL(mp_invmod);
+EXPORT_SYMBOL(mp_gcd);
+EXPORT_SYMBOL(mp_exteuclid);
+EXPORT_SYMBOL(mp_lcm);
+EXPORT_SYMBOL(mp_n_root);
+EXPORT_SYMBOL(mp_sqrt);
+EXPORT_SYMBOL(mp_is_square);
+EXPORT_SYMBOL(mp_jacobi);
+EXPORT_SYMBOL(mp_reduce_setup);
+EXPORT_SYMBOL(mp_reduce);
+EXPORT_SYMBOL(mp_montgomery_setup);
+EXPORT_SYMBOL(mp_montgomery_calc_normalization);
+EXPORT_SYMBOL(mp_montgomery_reduce);
+EXPORT_SYMBOL(mp_dr_is_modulus);
+EXPORT_SYMBOL(mp_dr_setup);
+EXPORT_SYMBOL(mp_dr_reduce);
+EXPORT_SYMBOL(mp_reduce_is_2k);
+EXPORT_SYMBOL(mp_reduce_2k_setup);
+EXPORT_SYMBOL(mp_reduce_2k);
+EXPORT_SYMBOL(mp_reduce_is_2k_l);
+EXPORT_SYMBOL(mp_reduce_2k_setup_l);
+EXPORT_SYMBOL(mp_reduce_2k_l);
+EXPORT_SYMBOL(mp_exptmod);
+EXPORT_SYMBOL(mp_prime_is_divisible);
+EXPORT_SYMBOL(mp_prime_fermat);
+EXPORT_SYMBOL(mp_prime_miller_rabin);
+EXPORT_SYMBOL(mp_prime_rabin_miller_trials);
+EXPORT_SYMBOL(mp_prime_is_prime);
+EXPORT_SYMBOL(mp_prime_next_prime);
+EXPORT_SYMBOL(mp_prime_random_ex);
+EXPORT_SYMBOL(mp_count_bits);
+EXPORT_SYMBOL(mp_unsigned_bin_size);
+EXPORT_SYMBOL(mp_read_unsigned_bin);
+EXPORT_SYMBOL(mp_to_unsigned_bin);
+EXPORT_SYMBOL(mp_to_unsigned_bin_n);
+EXPORT_SYMBOL(mp_signed_bin_size);
+EXPORT_SYMBOL(mp_read_signed_bin);
+EXPORT_SYMBOL(mp_to_signed_bin);
+EXPORT_SYMBOL(mp_to_signed_bin_n);
+EXPORT_SYMBOL(mp_read_radix);
+EXPORT_SYMBOL(mp_toradix);
+EXPORT_SYMBOL(mp_toradix_n);
+EXPORT_SYMBOL(mp_radix_size);
+
